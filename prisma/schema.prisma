// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "../lib/generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL") // direct connection for Prisma CLI
}

model Course {
  // id Int @id @unique @default(autoincrement())
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId      String
  title       String
  description String?   @db.Text
  imageUrl    String?   @db.Text
  price       Float?
  isPublished Boolean?  @default(false)
  categoryId  String?   @db.Uuid
  createdAt   DateTime? @default(now())
  updatedAt   DateTime? @updatedAt
  category    Category? @relation(fields: [categoryId], references: [id])

  attachments Attachment[]
  chapters    Chapter[]
  purchases   Purchase[]

  @@index([categoryId])
}

model Category {
  // id  Int @id  @unique @default(autoincrement())
  id      String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name    String
  // course -> courses
  courses Course[]
}

model Attachment {
  // id Int @id  @unique  @default(autoincrement())
  id        String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  courseId  String    @db.Uuid
  name      String
  url       String?   @db.Text
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt

  course Course? @relation(fields: [courseId], references: [id], onDelete: Cascade)

  // onDelete: Cascade will delete the attachment if the course is deleted
  @@index([courseId])
}

model Chapter {
  id          String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title       String
  description String? @db.Text
  videoUrl    String? @db.Text
  position    Int
  isPublished Boolean @default(false)
  isFree      Boolean @default(false)

  courseId String @db.Uuid
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  muxData      MuxData?
  userProgress UserProgress[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([courseId])
}

model MuxData {
  id        String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  assetId   String
  playback  String?
  chapterId String  @unique @db.Uuid

  chapter Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)
}

model UserProgress {
  id          String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  chapterId   String  @db.Uuid
  userId      String
  isCompleted Boolean @default(false)

  chapter   Chapter  @relation(fields: [chapterId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt

  @@unique([userId, chapterId])
  @@index([chapterId])
}

model Purchase {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId    String
  courseId  String   @db.Uuid
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt

  @@index([courseId])
}

model StripeCustomer {
  id               String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId           String   @unique
  stripeCustomerId String   @unique
  createdAt        DateTime @default(now())
  updateAt         DateTime @updatedAt
}
